AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates a CloudWatch Rule, SNS topic and Subscription to notify through email
  when changes Pipeline Execution state changes
Parameters:
  DomainName:
    Type: String
    Description: The base domain name for the web site (no 'www')
    MinLength: 4
    MaxLength: 253
    AllowedPattern: '[a-z0-9]+[-.a-z0-9]*(\.[a-z][a-z]+)+'
    ConstraintDescription: >-
      Provide a valid domain name using only lowercase letters, numbers, and
      dash (-)
    Default: code2inspire.uk
  GitHubOwner:
    Description: GitHub account username.
    Type: String
    Default: naziafakhruddin
  GitHubRepo:
    Description: Static site repo name.
    Type: String
    Default: code2inspire
  GitHubBranch:
    Description: The branch that will trigger build/deploy.
    Type: String
    Default: main-using-oai
Resources:
  ArtifactBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "nazia.io OAI"
  WebsiteBucketBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    DependsOn: WebsiteBucket
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
        - Action: "s3:Get*"
          Effect: Allow
          Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
          Principal:
            CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
  WebsiteBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      AccessControl: "BucketOwnerFullControl"
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
  CodePipelineRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodePipelineRolePolicy
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketVersioning'
            Resource: '*'
            Effect: Allow
          - Action:
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:aws:s3:::${WebsiteBucket}'
              - !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
              - !Sub 'arn:aws:s3:::${ArtifactBucket}'
              - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
            Effect: Allow
      Roles:
        - !Ref CodePipelineRole
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RoleArn: !GetAtt 
        - CodePipelineRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
                - Name: StaticSiteSource
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: '{{resolve:secretsmanager:MyGitHubSecret:SecretString:token}}'
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: S3Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              InputArtifacts:
                - Name: StaticSiteSource
              Configuration:
                BucketName: !Ref WebsiteBucket
                Extract: 'true'
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
  SSLCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub 'www.${DomainName}'
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          ValidationDomain: !Ref DomainName
        - DomainName: !Sub 'www.${DomainName}'
          ValidationDomain: !Ref DomainName
  CloudfrontDistro:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref DomainName
        - !Sub 'www.${DomainName}'
        DefaultCacheBehavior:
          AllowedMethods:
          - "GET"
          - "HEAD"
          - "OPTIONS"
          DefaultTTL: 3600
          ForwardedValues:
            QueryString: "true"
            Cookies:
              Forward: "none"
          TargetOriginId: "S3Origin"
          ViewerProtocolPolicy: "redirect-to-https"
        DefaultRootObject: "index.html"
        Enabled: "true"
        HttpVersion: http2
        Origins:
        - Id: "S3Origin"
          DomainName: !Sub '${WebsiteBucket}.s3.amazonaws.com'
          S3OriginConfig:
            OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", !Ref OriginAccessIdentity]]
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          MinimumProtocolVersion: "TLSv1.2_2018"
          SslSupportMethod: "sni-only"
  DomainDns:
    Type: "AWS::Route53::RecordSet"
    DependsOn: CloudfrontDistro
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudfrontDistro.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneName: !Sub '${DomainName}.'
      Name: !Sub '${DomainName}.'
      Type: "A"
  DomainDnsWww:
    Type: "AWS::Route53::RecordSet"
    DependsOn: CloudfrontDistro
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudfrontDistro.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneName: !Sub '${DomainName}.'
      Name: !Sub 'www.${DomainName}.'
      Type: "A"
Outputs: {}
